
/*
    Generated by the Return of the Table compiler.
 */


import rtlib.*;
import java.util.Scanner;

class user_purchases_anonymous_functor_1 implements JoinPredicate {


user_purchases_anonymous_functor_1(){}
public boolean test(Record record, Record a, Record b) {
                return ((((a).entries[0]._String).equals(((b).entries[0]._String))));
            }}
class user_purchases_anonymous_functor_2 implements FilterPredicate {


user_purchases_anonymous_functor_2(){}
public boolean test(Record record) {
                return ((((record).entries[4]._String).equals(("Tank"))));
            }}
class user_purchases_anonymous_functor_3 implements JoinPredicate {


user_purchases_anonymous_functor_3(){}
public boolean test(Record record, Record a, Record b) {
                return ((true));
            }}
class user_purchases_anonymous_functor_4 implements JoinPredicate {


user_purchases_anonymous_functor_4(){}
public boolean test(Record record, Record a, Record b) {
                return ((true));
            }}


public class user_purchases {
    static UserDefinedType rt0;
static UserDefinedType rt1;
static UserDefinedType rt2;
static Table rt3;
static Table rt4;
static int rt5;
public static void rt7() {
{
(rt5)=(2);
Table rt8;
(rt8)=((rt3).join((rt4), new user_purchases_anonymous_functor_1()));
System.out.println((rt8));
Table rt9;
(rt9)=((rt8).filter(new user_purchases_anonymous_functor_2()));
System.out.println((("\n")+("casting to component types:")));
System.out.println(((rt9).getReg(user_purchases.rt0)));
System.out.println((("\n")+("manual casting:")));
Table rt10;
(rt10)=(new Table(user_purchases.rt0));
for (Record rt11 : (rt9)){(rt10).addRow((new Record(user_purchases.rt0, new Data(((rt11).entries[0]._String)), new Data(((rt11).entries[1]._String)), new Data(((rt11).entries[2]._Integer)))));}
System.out.println((rt10));
System.out.println((("\n")+("manual table print (via iteration)")));
for (Record rt11 : (rt9)){System.out.println((rt11));}
System.out.println((("\n")+("indexing table...")));
Table rt11;
(rt11)=((new Table(user_purchases.rt2)).join(((rt9)), new user_purchases_anonymous_functor_3()));
int rt12;
(rt12)=(0);
for (Record rt13 : (rt9)){{
(rt11)=((rt11).append(((new Table((new Record(user_purchases.rt2, new Data((rt12)))))).join((new Table((rt13))), new user_purchases_anonymous_functor_4()))));
(rt12)=((rt12)+(1));

}}
System.out.println((rt11));
(rt3)=((rt3).addRow((new Record(user_purchases.rt0, new Data(("Matt")), new Data(("New York")), new Data((23))))));
System.out.println((("\n")+("checking global variables...")));
user_purchases.rt6();
System.out.println(((((""+(rt5))+(" should be 15... did it work? "))+(""+((rt5)==(15))))+("!")));

}}

public static void rt6() {
{
(rt5)=(15);

}}

    private static Scanner input;
		static String globArgs[];
    
	public static void main(String args[]) {
        input = new Scanner(System.in);
				globArgs = new String[args.length];
				for(int globArgCounter = 0; globArgCounter < args.length; globArgCounter++)
					globArgs[globArgCounter] = args[globArgCounter];
				
        user_purchases.rt0 = new UserDefinedType("User");
user_purchases.rt0.add("User's name", Data.STRING_TYPE);
user_purchases.rt0.add("User's addr", Data.STRING_TYPE);
user_purchases.rt0.add("User's age", Data.INT_TYPE);

user_purchases.rt1 = new UserDefinedType("Purchase");
user_purchases.rt1.add("Purchase's name", Data.STRING_TYPE);
user_purchases.rt1.add("Purchase's item", Data.STRING_TYPE);

user_purchases.rt2 = new UserDefinedType("index");
user_purchases.rt2.add("index's value", Data.INT_TYPE);

{
(rt3)=(CsvInterpreter.toTable(WorkingDir.getPath(("ourUsers.csv")), user_purchases.rt0));
(rt4)=(CsvInterpreter.toTable(WorkingDir.getPath(("ourPurchases.csv")), user_purchases.rt1));
(rt5)=(0);
user_purchases.rt7();

}
    }    
}

