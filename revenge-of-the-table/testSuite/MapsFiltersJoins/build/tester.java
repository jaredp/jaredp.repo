
/*
    Generated by the Return of the Table compiler.
 */


import rtlib.*;
import java.util.Scanner;

class tester_anonymous_functor_1 implements FilterPredicate {


tester_anonymous_functor_1(){}
public boolean test(Record record) {
                return ((((record).entries[0]._String).equals(("Michael"))));
            }}
class tester_anonymous_functor_2 implements JoinPredicate {


tester_anonymous_functor_2(){}
public boolean test(Record record, Record a, Record b) {
                return ((true));
            }}
class tester_anonymous_functor_3 implements FilterMap {


tester_anonymous_functor_3(){}
public Record map(Record record) {
                return ((new Record(tester.rt2, new Data(((record).entries[0]._String)), new Data(((record).entries[2]._String)))));
            }public UserDefinedType getType() {
                    return tester.rt2;
                }
}
class tester_anonymous_functor_4 implements JoinMap {


tester_anonymous_functor_4(){}
public Record map(Record record, Record a, Record b) {
                return ((new Record(tester.rt2, new Data(((record).entries[0]._String)), new Data(((record).entries[2]._String)))));
            }public UserDefinedType getType() {
                    return tester.rt2;
                }
}


public class tester {
    static UserDefinedType rt0;
static UserDefinedType rt1;
static UserDefinedType rt2;
static Table rt3;
static Table rt4;
static Table rt5;
static Table rt6;
static Table rt7;
static Table rt8;


    private static Scanner input;
		static String globArgs[];
    
	public static void main(String args[]) {
        input = new Scanner(System.in);
				globArgs = new String[args.length];
				for(int globArgCounter = 0; globArgCounter < args.length; globArgCounter++)
					globArgs[globArgCounter] = args[globArgCounter];
				
        tester.rt0 = new UserDefinedType("User");
tester.rt0.add("User's name", Data.STRING_TYPE);
tester.rt0.add("User's age", Data.INT_TYPE);

tester.rt1 = new UserDefinedType("Product");
tester.rt1.add("Product's itemName", Data.STRING_TYPE);
tester.rt1.add("Product's cost", Data.FLOAT_TYPE);

tester.rt2 = new UserDefinedType("Purchased");
tester.rt2.add("Purchased's cName", Data.STRING_TYPE);
tester.rt2.add("Purchased's pName", Data.STRING_TYPE);

{
(rt3)=(new Table((new Record(tester.rt0, new Data(("Michael")), new Data((21))))));
(rt3)=((rt3).addRow((new Record(tester.rt0, new Data(("Jared")), new Data((16))))));
System.out.println((rt3));
System.out.println("");
(rt4)=(new Table((new Record(tester.rt1, new Data(("Soap")), new Data((1.99))))));
(rt4)=((rt4).addRow((new Record(tester.rt1, new Data(("Chocolate")), new Data((16.))))));
System.out.println((rt4));
System.out.println("");
(rt5)=((rt3).filter(new tester_anonymous_functor_1()));
System.out.println((rt5));
System.out.println("");
(rt6)=((rt3).join((rt4), new tester_anonymous_functor_2()));
System.out.println((rt6));
System.out.println("");
(rt7)=((rt6).filterMap(new tester_anonymous_functor_3()));
System.out.println((rt7));
System.out.println("");
(rt8)=((rt3).joinMap((rt4), new tester_anonymous_functor_4()));
System.out.println((rt8));
System.out.println("");

}
    }    
}

