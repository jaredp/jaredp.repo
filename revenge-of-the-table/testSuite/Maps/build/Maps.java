
/*
    Generated by the Return of the Table compiler.
 */


import rtlib.*;
import java.util.Scanner;

class Maps_anonymous_functor_1 implements FilterMap {


Maps_anonymous_functor_1(){}
public Record map(Record record) {
                return ((Maps.rt9((record))));
            }public UserDefinedType getType() {
                    return Maps.rt1;
                }
}
class Maps_anonymous_functor_2 implements JoinMap {


Maps_anonymous_functor_2(){}
public Record map(Record record, Record a, Record b) {
                return ((new Record(Maps.rt1, new Data(((a).entries[0]._String)), new Data(((b).entries[0]._String)))));
            }public UserDefinedType getType() {
                    return Maps.rt1;
                }
}
class Maps_anonymous_functor_3 implements JoinPredicate {


Maps_anonymous_functor_3(){}
public boolean test(Record record, Record a, Record b) {
                return ((true));
            }}
class Maps_anonymous_functor_4 implements JoinMap {


Maps_anonymous_functor_4(){}
public Record map(Record record, Record a, Record b) {
                return ((((new Table((b))).join((new Table((new Record(Maps.rt1, new Data(((a).entries[0]._String)), new Data(((b).entries[0]._String)))))), new Maps_anonymous_functor_3())).first()));
            }public UserDefinedType getType() {
                    return new TupleType("User#relation", Maps.rt0, Maps.rt1);
                }
}
class Maps_anonymous_functor_5 implements JoinPredicate {


Maps_anonymous_functor_5(){}
public boolean test(Record record, Record a, Record b) {
                return ((((a).entries[1]._String).equals(((b).entries[0]._String))));
            }}


public class Maps {
    static UserDefinedType rt0;
static UserDefinedType rt1;
static Table rt2;
static Table rt3;
static Table rt4;
static Table rt5;
static Table rt6;
static int rt7;
static Table rt8;
public static Record rt9(Record rt10) {
{
 return (new Record(Maps.rt1, new Data(((rt10).entries[0]._String)), new Data(((rt10).entries[1]._String))));

}}

    private static Scanner input;
		static String globArgs[];
    
	public static void main(String args[]) {
        input = new Scanner(System.in);
				globArgs = new String[args.length];
				for(int globArgCounter = 0; globArgCounter < args.length; globArgCounter++)
					globArgs[globArgCounter] = args[globArgCounter];
				
        Maps.rt0 = new UserDefinedType("User");
Maps.rt0.add("User's name", Data.STRING_TYPE);
Maps.rt0.add("User's city", Data.STRING_TYPE);
Maps.rt0.add("User's age", Data.INT_TYPE);

Maps.rt1 = new UserDefinedType("relation");
Maps.rt1.add("relation's u1", Data.STRING_TYPE);
Maps.rt1.add("relation's u2", Data.STRING_TYPE);

{
(rt2)=(CsvInterpreter.toTable(WorkingDir.getPath(("users1.csv")), Maps.rt0));
(rt3)=(CsvInterpreter.toTable(WorkingDir.getPath(("users2.csv")), Maps.rt0));
System.out.println((rt2));
System.out.println("");
System.out.println((rt3));
System.out.println("");
(rt4)=((rt2).filterMap(new Maps_anonymous_functor_1()));
System.out.println((rt4));
(rt5)=((rt2).joinMap((rt3), new Maps_anonymous_functor_2()));
(rt6)=((rt3).joinMap((rt2), new Maps_anonymous_functor_4()));
System.out.println((rt6));
(rt7)=(15);
(rt8)=((rt4).join((rt3), new Maps_anonymous_functor_5()));
System.out.println("");
System.out.println((rt5));

}
    }    
}

