I learned a lot about working on a group software project in this class, and it was exciting to have the opportunity to work on a difficult, college-level project.  Like the others, I wish that we had done more coding earlier in the semester and not put off so many decisions until later.  On a positive note, I really enjoyed learning OCaml and plan to continue with functional programming.

I learned especially how important it should have been to have a coherent vision for a language.  Without it, we had a difficult time figuring out the details of the language, as we didn't really have an idea of what we wanted it to do.  

I learned that making compilers in ocaml, while fun, generally is a fairly standard procedure.  Once we had a good AST and translator, adding new features was mostly a matter of adding to the parser, and things that would support the parser, including whatever code was necessary to generate the java.  For example, the majority of the AST could be represented as function calls, including casts, unary, and binary operations.  Therefore, with a the function translation implemented, most functionality could have been implemented in the parser and built in functions.  I very much appreciated this because of the ability to very easily add features in very little time by focusing work on the parser, which was actually a bit addicting.